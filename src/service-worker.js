/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'
import axios from 'axios'
const { REACT_APP_WEBPUSH } = process.env

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    } // Return true to signal that we want to use the handler.

    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Any other custom service worker logic can go here.

// Cuando el backend envie un push.SendNotification, se ejecuta este evento, mostrando la notificaci√≥n en el navegador
self.addEventListener('push', function (e) {
  console.log('[Service Worker] Push Received.')
  const data = e.data.json() // data es un objeto JSON con el mensaje del push
  const title = data.title

  var options = {
    body: data.message,
    vibrate: [200, 100, 200, 100, 200, 100, 200],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1,
      url: data.url || '',
    },
  }
  e.waitUntil(self.registration.showNotification(title, options))
})

// Cuando se actyalice el push subscription, lo mandamos al backend para que lo guarde
self.addEventListener('pushsubscriptionchange', function (event) {
  const user = localStorage.getItem('user')

  const body = {
    user,
    endpoint: event.oldSubscription // Old endpoint
      ? event.oldSubscription.endpoint
      : null,
    newSubscription: {
      endpoint: event.newSubscription ? event.newSubscription.endpoint : null,
      keys: {
        p256dh: event.newSubscription
          ? event.newSubscription.toJSON().keys.p256dh
          : null,
        auth: event.newSubscription
          ? event.newSubscription.toJSON().keys.auth
          : null,
      },
    },
  }

  event.waitUntil(axios.post(`${REACT_APP_WEBPUSH}/updateSubscribe`, body))
})

self.addEventListener('notificationclick', function (event) {
  const notification = event.notification
  const url = event.notification.data.url

  notification.close()
  console.log('[Service Worker] Notification click Received.')
  console.log('event', event)
  console.log('url', url)
  event.waitUntil(
    clients // eslint-disable-line
      .matchAll({ type: 'window', includeUncontrolled: true })
      .then(function (windowClients) {
        let matchingClient = null
        // Reviso si hay una ventana abierta con la url del push
        for (let i = 0; i < windowClients.length; i++) {
          const windowClient = windowClients[i]
          if (windowClient.url === url) {
            matchingClient = windowClient
            break
          }
        }

        // Si hay una ventana abierta con la url del push, la pongo en primer plano
        if (matchingClient) {
          console.log('Focus')
          return matchingClient.focus()
        } else {
          console.log('Open')
          // Si no hay una ventana abierta con la url del push, la abro
          return url && clients.openWindow(url) // eslint-disable-line
        }
      })
  )
})
